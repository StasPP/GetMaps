unit HUD1;

interface

uses MapFunctions, GeoFunctions, TabFunctions, Vectors2, Classes, DrawFunctions,
     AbstractCanvas, AbstractDevices, AsphyreImages, AsphyreTypes, AsphyreFonts,
     RTypes, SysUtils;

procedure ScaleLine(AsphCanvas:TAsphyreCanvas; BigSize, isRight: Boolean;
      Msign, KmSign:String; FontN:Integer; IntColor: Cardinal);

implementation

procedure ScaleLine(AsphCanvas:TAsphyreCanvas; BigSize, isRight: Boolean;
      Msign, KmSign:String; FontN:Integer; IntColor: Cardinal);
var
    s :String;
    w :integer;
    X1, X2, Y2 :integer;
begin
    if Scale=0 then
         exit;

    w := trunc(TMashtab[Mashtab]/Scale);

    if isRight then
    Begin
      X1 := DispSize.X-20 - w;
      X2 := DispSize.X;
    End
      else
      Begin
        X1 := 0;
        X2 := w + 20;
      End;

    if BigSize then
       Y2 := 20
        else
          Y2 := 10;

    AsphCanvas.FillRect(RECT( X1, DispSize.Y - Y2*2, X2, DispSize.Y), IntColor);

    MyLine(AsphCanvas, X1 + 10, DispSize.Y - Y2/2, X1 + 10, DispSize.Y - 5,
           false, false, $FFFFFFFF);

    MyLine(AsphCanvas, X2 - 10, DispSize.Y - Y2/2, X2 - 10, DispSize.Y - 5,
           false, false, $FFFFFFFF);

    MyLine(AsphCanvas, X1 + 10, DispSize.Y - 5, X2-10, DispSize.Y - 5, false,
           false, $FFFFFFFF);


    if TMashtab[Mashtab]<1000 then
      s := IntTostr(TMashtab[Mashtab]) + ' ' + Msign
        else
          s := IntTostr(TMashtab[Mashtab] div 1000) + ' ' + KMsign;

    w := trunc(w/2 + AsphFonts[FontN].TextWidth(s)) ;

    AsphFonts[Font0].TextOut( Point2(X1 - w -10, DispSize.Y - 25),
                              s, clWhite2, 1.0);

end;

end.
